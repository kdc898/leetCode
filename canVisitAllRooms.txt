/**
There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.
*/

class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        Stack<Integer> keys = new Stack<Integer>();
        boolean[] havekey = new boolean[rooms.size()];
        keys.push(0);
        havekey[0] = true;
        //while we have keys
        while(!keys.isEmpty()){
            int room = keys.pop();
            //get all keys from current room
            for(int key : rooms.get(room)){
                //if we haven't gotten that key yet
                if(!havekey[key]){
                    havekey[key] = true;
                    keys.push(key);
                }
            }
        }
        //if any room has not been visited (doesn't have key), return false
        for(boolean visit : havekey){
            if(!visit){
                return false;
            }
        }

        return true;
    }
}